Number CHARGE_IGNITION_DISTANCE: 5;
Number CHARGE_IGNITION_DPS: 20 / 1.5;
Number CHARGE_IGNITION_DURATION: 3;
playervar Boolean chargeCanSetEnemiesOnFire;
playervar Any reinhardtIgnitionDoT = -1;
playervar Any[] reinhardtIgnitionEffect = [];
enum ReinhardtIgnitionEffect {
  MaterialEffect,
  ParticleEffect,
  VictimMaterialEffect
}

rule: "When Reinhardt charges, once charge starts, flag Rein to set enemies nearby on fire"
Event.OngoingPlayer
Team.Team2
Player.Reinhardt
if (IsUsingAbility1())
{
  Wait(0.6, WaitBehavior.AbortWhenFalse);
  chargeCanSetEnemiesOnFire = true;
  # Set upper limit of 5 seconds for safety
  WaitUntil(!IsUsingAbility1(), 5);
  chargeCanSetEnemiesOnFire = false;
}

rule: "When Reinhardt is eligible to set enemies on fire, create effects, then wait until no longer eligible to clean up"
Event.OngoingPlayer
Team.Team2
Player.Reinhardt
if (chargeCanSetEnemiesOnFire)
{
  reinhardtIgnitionEffect[ReinhardtIgnitionEffect.MaterialEffect] = CreateEffect(
    AllPlayers(),
    Effect.AsheDynamiteBurningMaterialEffect,
    <Color>TeamOf(),
    EventPlayer(),
    0,
    EffectRev.None
  );
  reinhardtIgnitionEffect[ReinhardtIgnitionEffect.ParticleEffect] = CreateEffect(
    AllPlayers(),
    Effect.AsheDynamiteBurningParticleEffect,
    <Color>TeamOf(),
    EventPlayer(),
    0,
    EffectRev.None
  );
  WaitUntil(!chargeCanSetEnemiesOnFire, 5);
  DestroyEffect(reinhardtIgnitionEffect[ReinhardtIgnitionEffect.MaterialEffect]);
  DestroyEffect(reinhardtIgnitionEffect[ReinhardtIgnitionEffect.ParticleEffect]);
}

rule: "If a member of Team 1 is too close to a reinhardt who can set them on fire, make them catch fire"
Event.OngoingPlayer
Team.Team1
# If any players on Team 2 who can set this player on fire are close enough to do so...
if (IsTrueForAny(AllLivingPlayers(Team.Team2).FilteredArray((player) => player.chargeCanSetEnemiesOnFire), DistanceBetween(ArrayElement(), EventPlayer()) < CHARGE_IGNITION_DISTANCE))
{
  # Stop any existing DoT to refresh the duration
  if ((reinhardtIgnitionDoT != -1 && EntityExists(reinhardtIgnitionDoT))) {
    StopDamageOverTime(reinhardtIgnitionDoT);
  }
  reinhardtIgnitionDoT = StartDamageOverTime(
    Receivers: EventPlayer(),
    Damagers: AllLivingPlayers(Team.Team2).FilteredArray((player) => player.chargeCanSetEnemiesOnFire).SortedArray(player => DistanceBetween(player, EventPlayer())).First,
    Duration: CHARGE_IGNITION_DURATION,
    DamagePerSecond: CHARGE_IGNITION_DPS
  );
  SetStatus(EventPlayer(), null, Status.Burning, CHARGE_IGNITION_DURATION);
  Wait(CHARGE_IGNITION_DURATION, WaitBehavior.RestartWhenTrue);
  StopDamageOverTime(reinhardtIgnitionDoT);
  reinhardtIgnitionDoT = -1;
}

rule: "If a member of Team 1 is burning and they get a health pack, remove the charge ignition DoT"
Event.OnHealingTaken
Team.Team1
if (EventWasHealthPack())
if (reinhardtIgnitionDoT != -1)
{
  StopDamageOverTime(reinhardtIgnitionDoT);
  reinhardtIgnitionDoT = -1;
  ClearStatus(EventPlayer(), Status.Burning);
}

rule: "If Tracer recalls, remove the charge ignition DoT"
Event.OngoingPlayer
Player.Tracer
if (IsUsingAbility2())
{
  StopDamageOverTime(reinhardtIgnitionDoT);
  reinhardtIgnitionDoT = -1;
  ClearStatus(EventPlayer(), Status.Burning);
}
