rule: "[DEBUG] Show standing locations"
Event.OnPlayerJoin
{
  CreateHudText(
    !(LocalPlayer() == null) ? EventPlayer() : null,
    PositionOf(), null, FacingDirectionOf(),
    Location.Left,
    0,
    Color.White, null, Color.White,
    HudTextRev.VisibleToAndString,
    Spectators.VisibleNever
  );
}

rule: "[DEBUG] Shorten assemble heroes"
if (IsAssemblingHeroes())
{
  SetMatchTime(.5);
}

// rule: "DEBUG: show if using ultimate"
// Event.OngoingPlayer
// {
//   CreateHudText(
//     EventPlayer(),
//     $"Is Using Ultimate:  {IsUsingUltimate()}",
//   );
// }

// rule: "DEBUG: Measure time using ability 1"
// Event.OngoingPlayer
// if (IsUsingUltimate())
// {
//   Number timestamp = TotalTimeElapsed();
//   SmallMessage(EventPlayer(), $"Started using Ultimate at {timestamp}");
//   WaitUntil(!IsUsingUltimate(), 99999);
//   Number endTimestamp = TotalTimeElapsed();
//   SmallMessage(EventPlayer(), $"Ultimate lasted for {endTimestamp - timestamp}s ({(endTimestamp - timestamp) / 0.016}  ticks)");
// }

// rule: "[DEBUG] Create dummy bot (crouch = enemy)"
// Event.OngoingPlayer
// if (EventPlayer() == HostPlayer())
// if (IsButtonHeld(Button: Button.Melee))
// {
//   if (IsButtonHeld(Button: Button.Crouch)) {
//     CreateDummyBot(
//       Hero.Brigitte,
//       OppositeTeamOf(TeamOf()),
//       5,
//       PositionOf(),
//       FacingDirectionOf()
//     );
//   } else {
//     CreateDummyBot(
//       Hero.Brigitte,
//       TeamOf(),
//       5,
//       PositionOf(),
//       FacingDirectionOf()
//     );
//   }
//   MinWait();
//   // SetMaxHealth(LastCreatedEntity(), 500);
// }

// rule: "[DEBUG] Hold interact to deal self-damage"
// Event.OngoingPlayer
// if (IsButtonHeld(EventPlayer(), Button.Interact))
// {
//   StartDamageOverTime(EventPlayer(), null, 0.25, 200);
//   Wait(0.25, WaitBehavior.AbortWhenFalse);
//   Loop();
// }

globalvar Player reinBot;
globalvar Player bot;
globalvar Player bot2;

Boolean botReady(Player bot): HasSpawned(bot) && !HasStatus(bot, Status.PhasedOut);

rule: "[DEBUG] Create bots"
if (IsWaitingForPlayers() ||IsGameInProgress())
{
  bot = CreateDummyBot(Hero.JunkerQueen, Team.Team1, 0, Vector(74, 12.71, -101.31), Vector(0.35, -0.12, 0.93));
  bot2 = CreateDummyBot(Hero.Lifeweaver, Team.Team1, 1, Vector(62.02, 18.72, -92.66), Vector(0.74, -0.41, -0.54));
  WaitUntil(botReady(bot), 10);
  SetStatus(bot, null, Status.Unkillable, 1000000);
  WaitUntil(botReady(bot2), 10);
  SetStatus(bot2, null, Status.Unkillable, 1000000);
}

rule: "[DEBUG] Press Interact to start scenario"
Event.OngoingPlayer
if (IsButtonHeld(Button: Button.Interact))
{
  if (IsDead(bot)) Resurrect(bot);
  if (IsDead(bot2)) Resurrect(bot2);

  SetAbilityCooldown(bot, Button.Ability2, 0);
  SetAbilityCooldown(bot2, Button.Ability2, 0);

  Wait(0.064);

  WaitUntil(botReady(bot) && botReady(bot2), 10);

  Teleport(bot, Vector(74, 12.71, -101.31));
  SetFacing(bot, Vector(0.35, -0.12, 0.93));
  Teleport(bot2, Vector(62.02, 18.72, -92.66));
  SetFacing(bot2, Vector(0.74, -0.41, -0.54));

  Wait(0.5);
  PressButton(bot, Button.Ability2);
  Wait(0.2);
  PressButton(EventPlayer(), Button.PrimaryFire);
  Wait(0.05);
  PressButton(bot2, Button.Ability2);
}

rule: "[DEBUG] Hold Interact to end match"
Event.OngoingPlayer
if (IsButtonHeld(Button: Button.Interact))
{
  Wait(3, WaitBehavior.AbortWhenFalse);
  DeclareTeamVictory(TeamOf());
}

rule: "End the game early"
Event.OngoingPlayer
if (EventPlayer().IsCommunicating(Communication.Goodbye))
{
  DeclareTeamVictory(TeamOf());
}

rule: "Perform action"
Event.OngoingPlayer
if (EventPlayer().IsButtonHeld(Button.Interact))
{
  SetUltimateCharge(reinBot, 100);
  MinWait();
  PressButton(reinBot, Button.Ultimate);
}

rule: "Heal dummy bots when they don't take damage for a while"
Event.OnDamageTaken
if (IsDummyBot(EventPlayer()))
{
  Wait(3, WaitBehavior.RestartWhenTrue);
  SetPlayerHealth(EventPlayer(), MaxHealth());
}
